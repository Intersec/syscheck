[{
    "id": "TEST_TASK_001__REQ_TRUE",
    "label": "Automatic check returns true",
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_FALSE",
    "label": "Automatic check returns false",
    "automatic_check": [ "generic_tools.false" ]
}, {
    "id": "TEST_TASK_001__REQ_EMPTY",
    "label": "Automatic check returns false",
    "automatic_check": []
}, {
    "id": "TEST_TASK_001__REQ_EACH_TRUE",
    "label": "Automatic check is recursive",
    "automatic_check": [ "generic_tools.each",
                         [ "generic_tools.true" ],
                         [ "generic_tools.true" ]
                       ]
}, {
    "id": "TEST_TASK_001__REQ_EACH_FALSE",
    "label": "Automatic check uses 'each' and returns false",
    "automatic_check": [ "generic_tools.each",
                         [ "generic_tools.false" ],
                         [ "generic_tools.true" ]
                       ]
}, {
    "id": "TEST_TASK_001__REQ_ANY_TRUE",
    "label": "Automatic check uses 'any' and returns true",
    "automatic_check": [ "generic_tools.any",
                         [ "generic_tools.true" ],
                         [ "generic_tools.false" ]
                       ]
}, {
    "id": "TEST_TASK_001__REQ_ANY_FALSE",
    "label": "Automatic check uses 'each' and returns false",
    "automatic_check": [ "generic_tools.any",
                         [ "generic_tools.false" ],
                         [ "generic_tools.false" ]
                       ]
}, {
    "id": "TEST_TASK_001__REQ_NO_RESULT",
    "label": "Automatic check returns 'None'",
    "automatic_check": [ "generic_tools.none" ]
}, {
    "id": "TEST_TASK_001__REQ_INVAL_AUTO_CHECK_001",
    "label": "Automatic_check parameter is a requirement and not a function",
    "automatic_check": [ "TEST_TASK_001__REQ_FALSE" ]
}, {
    "id": "TEST_TASK_001__REQ_INVAL_DEP_002",
    "label": "Dependency do not exists",
    "dependencies": "REQ_DO_NOT_EXISIS",
    "automatic_check": [ "generic_tools.false" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_TRUE",
    "label": "Auto check is false but dependency is true",
    "dependencies": "TEST_TASK_001__REQ_TRUE",
    "automatic_check": [ "generic_tools.false" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_AND_CHECK_TRUE",
    "label": "Auto check and dependency are both true",
    "dependencies": "TEST_TASK_001__REQ_TRUE",
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_FALSE",
    "label": "Auto check is true but dependency is false",
    "dependencies": "TEST_TASK_001__REQ_FALSE",
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_LIST_ANY_TRUE",
    "label": "Dependencies are a list using any",
    "dependencies": [ "any",
                      "TEST_TASK_001__REQ_FALSE",
                      "TEST_TASK_001__REQ_TRUE" ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_LIST_ANY_FALSE",
    "label": "Dependencies are a list using any",
    "dependencies": [ "any",
                      "TEST_TASK_001__REQ_FALSE",
                      "TEST_TASK_001__REQ_FALSE" ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_LIST_EACH_TRUE",
    "label": "Dependencies are a list using any",
    "dependencies": [ "each",
                      "TEST_TASK_001__REQ_TRUE",
                      "TEST_TASK_001__REQ_TRUE" ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_LIST_EACH_FALSE",
    "label": "Dependencies are a list using any",
    "dependencies": [ "each",
                      "TEST_TASK_001__REQ_TRUE",
                      "TEST_TASK_001__REQ_FALSE" ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_COMPLEX_EACH_TRUE",
    "label": "Dependencies are a complex list",
    "dependencies": [ "any",
                      [ "each", "TEST_TASK_001__REQ_TRUE", "TEST_TASK_001__REQ_FALSE" ],
                      [ "any", "TEST_TASK_001__REQ_TRUE", "TEST_TASK_001__REQ_FALSE" ] ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_COMPLEX_EACH_FALSE",
    "label": "Dependencies are a complex list",
    "dependencies": [ "each",
                      [ "any", "TEST_TASK_001__REQ_FALSE", "TEST_TASK_001__REQ_TRUE" ],
                      [ "each", "TEST_TASK_001__REQ_TRUE", "TEST_TASK_001__REQ_FALSE" ] ],
    "automatic_check": [ "generic_tools.true" ]
}, {
    "id": "TEST_TASK_001__REQ_KV_DB_ACCESS",
    "label": "Test db_tools.is_set",
    "automatic_check": [ "db_tools.is_set" ]
}, {
    "id": "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_PATH",
    "label": "Repository path is known",
    "automatic_check": [ "db_tools.is_set" ]
}, {
    "id": "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_BRANCH",
    "label": "Repository branch is known",
    "automatic_check": [ "db_tools.is_set" ]
}, {
    "id": "TEST_TASK_001__SIMPLE_AUTO_RES",
    "label": "Automatic resolution with a git repository",
    "dependencies": [ "each",
                      "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_PATH",
                      "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_BRANCH" ],
    "automatic_check": [
        "git_tools.is_branch_checked_out",
        [ "db_tools.get_value", "env", "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_PATH" ],
        [ "db_tools.get_value", "env", "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_BRANCH" ]
    ],
    "resolution": {
        "auto": {
            "label": "Automatic resolution",
            "method": "automatic",
            "steps": [
                "git_tools.checkout_branch",
                [ "db_tools.get_value", "env", "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_PATH" ],
                [ "db_tools.get_value", "env", "TEST_TASK_001__SIMPLE_AUTO_RES_REPO_BRANCH" ]
            ]
        }
    }
}, {
    "id": "TEST_TASK_001__AUTO_RES_DB",
    "label": "Automatic resolution and automatic check use different database key",
    "automatic_check": [ "db_tools.is_set", "env", "key001" ],
    "resolution": {
        "auto": {
            "label": "Automatic resolution",
            "method": "automatic",
            "steps": [ "db_tools.set_value", "env", "key002", "value002" ]
        },
        "manual": {
            "label": "Manual resolution",
            "method": "manual",
            "description": "This is a description of how to fulfill this requirement"
        },
        "auto_no_steps": {
            "label": "Automatic resolution without steps",
            "method": "automatic"
        }
    }
}, {
    "id": "TEST_TASK_001__REQ_DEP_BUT_NO_RESULT",
    "label": "Automatic check returns 'None'",
    "dependencies": "TEST_TASK_001__REQ_FALSE",
    "automatic_check": [ "generic_tools.none" ]
}, {
    "id": "TEST_TASK_001__REQ_DEP_COMPLEX_EACH_2",
    "label": "Dependencies are a complex list",
    "dependencies": [ "each",
                      [ "any", "TEST_TASK_001__REQ_FALSE", "TEST_TASK_001__REQ_DEP_AND_CHECK_TRUE" ],
                      [ "each", "TEST_TASK_001__REQ_TRUE", "TEST_TASK_001__REQ_DEP_FALSE" ],
                      "TEST_TASK_001__REQ_MULTIPLE_RESOLUTIONS"
                    ],
    "automatic_check": [ "generic_tools.true" ],
    "resolution": {
        "manual_res": {
            "label": "Manual resolution",
            "method": "ui.manual",
            "description": "git -C '[<repo_path>|env.key001]' checkout '[<branch>|env.key002]'"
        }
    }
}, {
    "id": "TEST_TASK_001__REQ_MULTIPLE_RESOLUTIONS",
    "label": "Requirement with multiple resolutions",
    "automatic_check": [ "generic_tools.each",
                         [ "db_tools.is_set", "env", "key001" ],
                         [ "db_tools.is_set", "env", "key002" ]
                       ],
    "resolution": {
        "manual_res": {
            "label": "Manual resolution",
            "method": "ui.manual",
            "description": "git -C '[<repo_path>|env.key001]' checkout '[<branch>|env.key002]'"
        },
        "assisted_user_default": {
            "label": "Assisted, using one default value",
            "method": "automatic",
            "steps": [ "db_tools.set_value", "env", "key002", "debug-0.1" ]
        },
        "assisted_user_default_db": {
            "label": "Assisted, using one default value from database",
            "method": "automatic",
            "steps": [ "db_tools.set_value", "env", "key002",
                       [ "db_tools.get_value", "env", "key001" ] ]
        },
        "assisted_user_input": {
            "label": "Assisted, using user input",
            "method": "ui.user_input",
            "db": "env",
            "key": "key002"
        },
        "assisted_user_input_key001": {
            "label": "Assisted, using user input for first key",
            "method": "ui.user_input",
            "db": "env",
            "key": "key001"
        },
        "assisted_user_select": {
            "label": "Assisted, using default values",
            "method": "ui.user_select",
            "src_db": "common",
            "src_collection": "known_tasks",
            "db": "env",
            "key": "key002"
        },
        "reset": {
            "label": "Reset",
            "method": "automatic",
            "steps": [ "generic_tools.each",
                       [ "db_tools.set_value", "env", "key001", [ "generic_tools.none" ] ],
                       [ "db_tools.set_value", "env", "key002", [ "generic_tools.none" ] ]
                     ]
        }
    }
}]
